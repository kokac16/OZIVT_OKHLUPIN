def simple_decorator(func):
    # Объявляем внутреннюю функцию-обертку (wrapper), которая будет выполняться вместо оригинальной функции
    def wrapper(*args, **kwargs):
        # Выводим название вызванной функции перед её выполнением
        print(f"Вызвана функция {func.__name__}")
        
        # Вызываем оригинальную функцию с переданными аргументами и ключевыми словами
        result = func(*args, **kwargs)
        
        # Возвращаем результат выполнения функции
        return result
    
    # Возвращаем функцию-обертку в качестве результата работы декоратора
    return wrapper

# Используем декоратор для двух функций

@simple_decorator
def greet(name):
    # Выводим приветствие с переданным именем
    print(f"Привет, {name}!")

@simple_decorator
def square(x):
    # Возвращаем квадрат переданного числа
    return x ** 2

# Тестируем функции

greet("Анна")  # Декоратор выведет: Вызвана функция greet
result = square(5)  # Декоратор выведет: Вызвана функция square
